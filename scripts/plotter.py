import matplotlib.pyplot as plt
import numpy as np

print "calculating binomials..."


if 0:
    X = 8
    l = 26
    c = 8
    ck = 6
    
    Mess = [x * 10 for x in range(31)]
    
    
    plt.plot([15, 30, 45, 60, 75, 90, 105, 120, 135, 150, 165, 180, 195, 210, 225, 240, 255, 270, 285, 300],
             [0.0, 0.0, 2.9999999999999997e-05, 3e-05, 9.5e-05, 0.00021500000000000008, 0.0004700000000000003, 0.0006100000000000003, 0.0012049999999999982, 0.0018549999999999916, 0.002879999999999976, 0.004614999999999954, 0.006449999999999921, 0.008554999999999922, 0.012050000000000045, 0.01715000000000014, 0.022420000000000183, 0.028960000000000104, 0.036655000000000174, 0.04569000000000022],
            "--", marker='x', label="c: " + str(c) + ", ck: " + str(ck) + ", l: " + str(l) + " (alea)")
             
    plt.xlabel("Number of learnt messages (M)")
    plt.ylabel("Error rate")
    
    #plt.plot([100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],
    #         [0.0017, 0.00445, 0.00565, 0.0121, 0.031, 0.0639, 0.10655, 0.19375, 0.2618, 0.3404, 0.44675],
    #        "-", marker='*', label="c: " + str(c) + ", ck: " + str(ck) + ", l: " + str(l) + " (2 layers)")
            
    plt.plot([100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],
             [0.0023, 0.0021, 0.00315, 0.0062, 0.0093, 0.0178, 0.0327, 0.053, 0.07225, 0.1132, 0.16055],
            "-", marker='*', label="c: " + str(c) + ", ck: " + str(ck) + ", l: " + str(l) + " (2 layers, improved)")
            
    plt.plot([100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],
             [0.0023, 0.0017, 0.00275, 0.0052, 0.0071, 0.0112, 0.01655, 0.02175, 0.0291, 0.045, 0.0611],
            "-", marker='^', label="c: " + str(c) + ", ck: " + str(ck) + ", l: " + str(l) + " (code layer, strict)")
    
    plt.plot([10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120, 130, 140, 150, 160, 170, 180, 190, 200],
             [0, 0.0013, 0.0045, 0.01395, 0.02225, 0.0375, 0.0594, 0.09075, 0.1008, 0.15775, 0.1883, 0.217, 0.2502, 0.2999, 0.3205, 0.3632, 0.38875, 0.42475, 0.44895, 0.4916],
            "-", marker='v', label="c: " + str(c) + ", ck: " + str(ck) + ", l: " + str(l) + " (mono-layer)")
            
    plt.gca().grid(True)
    plt.yticks(np.arange(0, 0.5, 0.05))
    plt.legend(loc="upper left")

###Iterations

Mess = [x*1000 for x in range(1, 31)]

Y0 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0003, 0.0003, 0.0006000000000000001, 0.001, 0.0028000000000000004, 0.005900000000000002, 0.009100000000000004, 0.013400000000000007, 0.022700000000000012, 0.03379999999999999, 0.05720000000000001, 0.08210000000000002, 0.12270000000000003, 0.17399999999999996, 0.24859999999999996, 0.31779999999999997, 0.42850000000000016, 0.5352, 0.6455999999999998, 0.7597999999999999]

Y40 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0004, 0.001, 0.0016, 0.0027999999999999995, 0.0052000000000000015, 0.012800000000000004, 0.01640000000000001, 0.024800000000000013, 0.03280000000000002, 0.05180000000000001, 0.1088, 0.2254000000000001, 0.4056, 0.6137999999999999, 0.7716, 0.8839999999999998, 0.939, 0.9686000000000001, 0.9855999999999997, 0.9925999999999999, 0.9954, 0.9980000000000001, 0.9989999999999999, 0.9990000000000001, 0.9988000000000002]

Y50 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0004, 0.0002, 0.0004, 0.0012000000000000001, 0.0018, 0.0038000000000000013, 0.006800000000000001, 0.012600000000000005, 0.015200000000000007, 0.027200000000000016, 0.03840000000000002, 0.06480000000000001, 0.11580000000000001, 0.2184000000000001, 0.39640000000000003, 0.5838, 0.7541999999999999, 0.8683999999999996, 0.9376000000000001, 0.968, 0.9839999999999995, 0.9895999999999998, 0.9958, 0.997, 0.9982]

Y80 = [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0006, 0.0002, 0.0004, 0.001, 0.0026, 0.0036, 0.008, 0.011600000000000006, 0.01880000000000001, 0.028000000000000014, 0.051400000000000015, 0.0858, 0.1654, 0.2706, 0.4222000000000001, 0.6200000000000001, 0.7578, 0.8704000000000001, 0.9469999999999998, 0.9723999999999999, 0.9871999999999999]

plt.plot(Mess, 
         [0.015141585500000014, 0.030058610999999975, 0.04474464, 0.0592122815, 0.07345905549999998, 0.08748733450000007, 0.10130246500000001, 0.11491860000000001, 0.12832443, 0.14152174000000003, 0.15452304000000008, 0.16731655500000003, 0.17992871499999996, 0.19234925999999997, 0.20455970000000007, 0.21662318999999994, 0.22849283999999995, 0.24016668000000008, 0.25167680000000003, 0.263010945, 0.2741688550000001, 0.285146705, 0.29598689999999994, 0.3066501299999999, 0.3171455499999999, 0.32749828000000003, 0.337681255, 0.3477074299999998, 0.3575804200000001, 0.36730316499999993],
        "--", label="density")

plt.plot(Mess, 
         [0.0, 0.0, 0.0, 0.0, 0.0, 5e-05, 0.0001, 0.00030000000000000003, 0.0006999999999999999, 0.0012000000000000003, 0.002600000000000001, 0.004100000000000003, 0.009100000000000007, 0.013849999999999973, 0.023449999999999954, 0.03834999999999994, 0.05724999999999996, 0.09075000000000003, 0.12075000000000005, 0.1792500000000002, 0.2402000000000001, 0.3226, 0.4017999999999999, 0.49550000000000005, 0.5852999999999998, 0.6717, 0.7425499999999997, 0.8043000000000003, 0.8578500000000004, 0.8986499999999998],
        "-", marker='^', label="no noise")
        
plt.plot(Mess, 
         Y40,
        "-", marker='x', label="nsyn = 10, prel=0.4")
        
plt.plot(Mess, 
         Y50,
        "-", marker='s', label="nsyn = 10, prel=0.5")
        
plt.plot(Mess, 
         Y80,
        "-", marker='v', label="nsyn = 10, prel=0.8")
        
        
plt.plot(Mess, 
         [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0002, 0.0004, 0.0006, 0.0010500000000000002, 0.002250000000000001, 0.003750000000000002, 0.007200000000000004, 0.011499999999999995, 0.015349999999999961, 0.023599999999999937, 0.033399999999999944, 0.04664999999999996, 0.06279999999999995, 0.08304999999999994, 0.12085000000000007, 0.1702500000000002, 0.23590000000000003, 0.33080000000000015, 0.44694999999999985, 0.5805500000000001, 0.6968000000000003, 0.8043500000000006, 0.8856499999999996, 0.9358499999999998],
        "-", marker='*', label="nsyn = 20, prel=0.5")
    
plt.xlabel("Number of learnt messages (M)")
plt.ylabel("Error rate, density")    
plt.gca().grid(True)
plt.yticks(np.arange(0, 1.1, 0.1))
plt.legend(loc="upper left")